
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Brute
 * 
 */
export type Brute = {
  id: number
  nom: string
  currentxp: number
  maxxp: number
  level: number
  hp: number
  force: number
  endurance: number
  agilite: number
  nbmatch: number
}

/**
 * Model Arme
 * 
 */
export type Arme = {
  id: number
  tauxDeCritique: number
  multiplicateurCritique: number
  poids: number
  modificateurDegats: number
  bruteId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Brutes
 * const brutes = await prisma.brute.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Brutes
   * const brutes = await prisma.brute.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.brute`: Exposes CRUD operations for the **Brute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brutes
    * const brutes = await prisma.brute.findMany()
    * ```
    */
  get brute(): Prisma.BruteDelegate<GlobalReject>;

  /**
   * `prisma.arme`: Exposes CRUD operations for the **Arme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Armes
    * const armes = await prisma.arme.findMany()
    * ```
    */
  get arme(): Prisma.ArmeDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Brute: 'Brute',
    Arme: 'Arme'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BruteCountOutputType
   */


  export type BruteCountOutputType = {
    armes: number
  }

  export type BruteCountOutputTypeSelect = {
    armes?: boolean
  }

  export type BruteCountOutputTypeGetPayload<S extends boolean | null | undefined | BruteCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BruteCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BruteCountOutputTypeArgs)
    ? BruteCountOutputType 
    : S extends { select: any } & (BruteCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BruteCountOutputType ? BruteCountOutputType[P] : never
  } 
      : BruteCountOutputType




  // Custom InputTypes

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BruteCountOutputType
     */
    select?: BruteCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Brute
   */


  export type AggregateBrute = {
    _count: BruteCountAggregateOutputType | null
    _avg: BruteAvgAggregateOutputType | null
    _sum: BruteSumAggregateOutputType | null
    _min: BruteMinAggregateOutputType | null
    _max: BruteMaxAggregateOutputType | null
  }

  export type BruteAvgAggregateOutputType = {
    id: number | null
    currentxp: number | null
    maxxp: number | null
    level: number | null
    hp: number | null
    force: number | null
    endurance: number | null
    agilite: number | null
    nbmatch: number | null
  }

  export type BruteSumAggregateOutputType = {
    id: number | null
    currentxp: number | null
    maxxp: number | null
    level: number | null
    hp: number | null
    force: number | null
    endurance: number | null
    agilite: number | null
    nbmatch: number | null
  }

  export type BruteMinAggregateOutputType = {
    id: number | null
    nom: string | null
    currentxp: number | null
    maxxp: number | null
    level: number | null
    hp: number | null
    force: number | null
    endurance: number | null
    agilite: number | null
    nbmatch: number | null
  }

  export type BruteMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    currentxp: number | null
    maxxp: number | null
    level: number | null
    hp: number | null
    force: number | null
    endurance: number | null
    agilite: number | null
    nbmatch: number | null
  }

  export type BruteCountAggregateOutputType = {
    id: number
    nom: number
    currentxp: number
    maxxp: number
    level: number
    hp: number
    force: number
    endurance: number
    agilite: number
    nbmatch: number
    _all: number
  }


  export type BruteAvgAggregateInputType = {
    id?: true
    currentxp?: true
    maxxp?: true
    level?: true
    hp?: true
    force?: true
    endurance?: true
    agilite?: true
    nbmatch?: true
  }

  export type BruteSumAggregateInputType = {
    id?: true
    currentxp?: true
    maxxp?: true
    level?: true
    hp?: true
    force?: true
    endurance?: true
    agilite?: true
    nbmatch?: true
  }

  export type BruteMinAggregateInputType = {
    id?: true
    nom?: true
    currentxp?: true
    maxxp?: true
    level?: true
    hp?: true
    force?: true
    endurance?: true
    agilite?: true
    nbmatch?: true
  }

  export type BruteMaxAggregateInputType = {
    id?: true
    nom?: true
    currentxp?: true
    maxxp?: true
    level?: true
    hp?: true
    force?: true
    endurance?: true
    agilite?: true
    nbmatch?: true
  }

  export type BruteCountAggregateInputType = {
    id?: true
    nom?: true
    currentxp?: true
    maxxp?: true
    level?: true
    hp?: true
    force?: true
    endurance?: true
    agilite?: true
    nbmatch?: true
    _all?: true
  }

  export type BruteAggregateArgs = {
    /**
     * Filter which Brute to aggregate.
     */
    where?: BruteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brutes to fetch.
     */
    orderBy?: Enumerable<BruteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BruteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brutes
    **/
    _count?: true | BruteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BruteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BruteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BruteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BruteMaxAggregateInputType
  }

  export type GetBruteAggregateType<T extends BruteAggregateArgs> = {
        [P in keyof T & keyof AggregateBrute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrute[P]>
      : GetScalarType<T[P], AggregateBrute[P]>
  }




  export type BruteGroupByArgs = {
    where?: BruteWhereInput
    orderBy?: Enumerable<BruteOrderByWithAggregationInput>
    by: BruteScalarFieldEnum[]
    having?: BruteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BruteCountAggregateInputType | true
    _avg?: BruteAvgAggregateInputType
    _sum?: BruteSumAggregateInputType
    _min?: BruteMinAggregateInputType
    _max?: BruteMaxAggregateInputType
  }


  export type BruteGroupByOutputType = {
    id: number
    nom: string
    currentxp: number
    maxxp: number
    level: number
    hp: number
    force: number
    endurance: number
    agilite: number
    nbmatch: number
    _count: BruteCountAggregateOutputType | null
    _avg: BruteAvgAggregateOutputType | null
    _sum: BruteSumAggregateOutputType | null
    _min: BruteMinAggregateOutputType | null
    _max: BruteMaxAggregateOutputType | null
  }

  type GetBruteGroupByPayload<T extends BruteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BruteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BruteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BruteGroupByOutputType[P]>
            : GetScalarType<T[P], BruteGroupByOutputType[P]>
        }
      >
    >


  export type BruteSelect = {
    id?: boolean
    nom?: boolean
    currentxp?: boolean
    maxxp?: boolean
    level?: boolean
    hp?: boolean
    force?: boolean
    endurance?: boolean
    agilite?: boolean
    nbmatch?: boolean
    armes?: boolean | Brute$armesArgs
    _count?: boolean | BruteCountOutputTypeArgs
  }


  export type BruteInclude = {
    armes?: boolean | Brute$armesArgs
    _count?: boolean | BruteCountOutputTypeArgs
  }

  export type BruteGetPayload<S extends boolean | null | undefined | BruteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Brute :
    S extends undefined ? never :
    S extends { include: any } & (BruteArgs | BruteFindManyArgs)
    ? Brute  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'armes' ? Array < ArmeGetPayload<S['include'][P]>>  :
        P extends '_count' ? BruteCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BruteArgs | BruteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'armes' ? Array < ArmeGetPayload<S['select'][P]>>  :
        P extends '_count' ? BruteCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Brute ? Brute[P] : never
  } 
      : Brute


  type BruteCountArgs = 
    Omit<BruteFindManyArgs, 'select' | 'include'> & {
      select?: BruteCountAggregateInputType | true
    }

  export interface BruteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Brute that matches the filter.
     * @param {BruteFindUniqueArgs} args - Arguments to find a Brute
     * @example
     * // Get one Brute
     * const brute = await prisma.brute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BruteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BruteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Brute'> extends True ? Prisma__BruteClient<BruteGetPayload<T>> : Prisma__BruteClient<BruteGetPayload<T> | null, null>

    /**
     * Find one Brute that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BruteFindUniqueOrThrowArgs} args - Arguments to find a Brute
     * @example
     * // Get one Brute
     * const brute = await prisma.brute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BruteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BruteFindUniqueOrThrowArgs>
    ): Prisma__BruteClient<BruteGetPayload<T>>

    /**
     * Find the first Brute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteFindFirstArgs} args - Arguments to find a Brute
     * @example
     * // Get one Brute
     * const brute = await prisma.brute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BruteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BruteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Brute'> extends True ? Prisma__BruteClient<BruteGetPayload<T>> : Prisma__BruteClient<BruteGetPayload<T> | null, null>

    /**
     * Find the first Brute that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteFindFirstOrThrowArgs} args - Arguments to find a Brute
     * @example
     * // Get one Brute
     * const brute = await prisma.brute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BruteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BruteFindFirstOrThrowArgs>
    ): Prisma__BruteClient<BruteGetPayload<T>>

    /**
     * Find zero or more Brutes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brutes
     * const brutes = await prisma.brute.findMany()
     * 
     * // Get first 10 Brutes
     * const brutes = await prisma.brute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bruteWithIdOnly = await prisma.brute.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BruteFindManyArgs>(
      args?: SelectSubset<T, BruteFindManyArgs>
    ): Prisma.PrismaPromise<Array<BruteGetPayload<T>>>

    /**
     * Create a Brute.
     * @param {BruteCreateArgs} args - Arguments to create a Brute.
     * @example
     * // Create one Brute
     * const Brute = await prisma.brute.create({
     *   data: {
     *     // ... data to create a Brute
     *   }
     * })
     * 
    **/
    create<T extends BruteCreateArgs>(
      args: SelectSubset<T, BruteCreateArgs>
    ): Prisma__BruteClient<BruteGetPayload<T>>

    /**
     * Create many Brutes.
     *     @param {BruteCreateManyArgs} args - Arguments to create many Brutes.
     *     @example
     *     // Create many Brutes
     *     const brute = await prisma.brute.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BruteCreateManyArgs>(
      args?: SelectSubset<T, BruteCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Brute.
     * @param {BruteDeleteArgs} args - Arguments to delete one Brute.
     * @example
     * // Delete one Brute
     * const Brute = await prisma.brute.delete({
     *   where: {
     *     // ... filter to delete one Brute
     *   }
     * })
     * 
    **/
    delete<T extends BruteDeleteArgs>(
      args: SelectSubset<T, BruteDeleteArgs>
    ): Prisma__BruteClient<BruteGetPayload<T>>

    /**
     * Update one Brute.
     * @param {BruteUpdateArgs} args - Arguments to update one Brute.
     * @example
     * // Update one Brute
     * const brute = await prisma.brute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BruteUpdateArgs>(
      args: SelectSubset<T, BruteUpdateArgs>
    ): Prisma__BruteClient<BruteGetPayload<T>>

    /**
     * Delete zero or more Brutes.
     * @param {BruteDeleteManyArgs} args - Arguments to filter Brutes to delete.
     * @example
     * // Delete a few Brutes
     * const { count } = await prisma.brute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BruteDeleteManyArgs>(
      args?: SelectSubset<T, BruteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brutes
     * const brute = await prisma.brute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BruteUpdateManyArgs>(
      args: SelectSubset<T, BruteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brute.
     * @param {BruteUpsertArgs} args - Arguments to update or create a Brute.
     * @example
     * // Update or create a Brute
     * const brute = await prisma.brute.upsert({
     *   create: {
     *     // ... data to create a Brute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brute we want to update
     *   }
     * })
    **/
    upsert<T extends BruteUpsertArgs>(
      args: SelectSubset<T, BruteUpsertArgs>
    ): Prisma__BruteClient<BruteGetPayload<T>>

    /**
     * Count the number of Brutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteCountArgs} args - Arguments to filter Brutes to count.
     * @example
     * // Count the number of Brutes
     * const count = await prisma.brute.count({
     *   where: {
     *     // ... the filter for the Brutes we want to count
     *   }
     * })
    **/
    count<T extends BruteCountArgs>(
      args?: Subset<T, BruteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BruteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BruteAggregateArgs>(args: Subset<T, BruteAggregateArgs>): Prisma.PrismaPromise<GetBruteAggregateType<T>>

    /**
     * Group by Brute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BruteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BruteGroupByArgs['orderBy'] }
        : { orderBy?: BruteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BruteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBruteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Brute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BruteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    armes<T extends Brute$armesArgs= {}>(args?: Subset<T, Brute$armesArgs>): Prisma.PrismaPromise<Array<ArmeGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Brute base type for findUnique actions
   */
  export type BruteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BruteInclude | null
    /**
     * Filter, which Brute to fetch.
     */
    where: BruteWhereUniqueInput
  }

  /**
   * Brute findUnique
   */
  export interface BruteFindUniqueArgs extends BruteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Brute findUniqueOrThrow
   */
  export type BruteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BruteInclude | null
    /**
     * Filter, which Brute to fetch.
     */
    where: BruteWhereUniqueInput
  }


  /**
   * Brute base type for findFirst actions
   */
  export type BruteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BruteInclude | null
    /**
     * Filter, which Brute to fetch.
     */
    where?: BruteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brutes to fetch.
     */
    orderBy?: Enumerable<BruteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brutes.
     */
    cursor?: BruteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brutes.
     */
    distinct?: Enumerable<BruteScalarFieldEnum>
  }

  /**
   * Brute findFirst
   */
  export interface BruteFindFirstArgs extends BruteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Brute findFirstOrThrow
   */
  export type BruteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BruteInclude | null
    /**
     * Filter, which Brute to fetch.
     */
    where?: BruteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brutes to fetch.
     */
    orderBy?: Enumerable<BruteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brutes.
     */
    cursor?: BruteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brutes.
     */
    distinct?: Enumerable<BruteScalarFieldEnum>
  }


  /**
   * Brute findMany
   */
  export type BruteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BruteInclude | null
    /**
     * Filter, which Brutes to fetch.
     */
    where?: BruteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brutes to fetch.
     */
    orderBy?: Enumerable<BruteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brutes.
     */
    cursor?: BruteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brutes.
     */
    skip?: number
    distinct?: Enumerable<BruteScalarFieldEnum>
  }


  /**
   * Brute create
   */
  export type BruteCreateArgs = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BruteInclude | null
    /**
     * The data needed to create a Brute.
     */
    data: XOR<BruteCreateInput, BruteUncheckedCreateInput>
  }


  /**
   * Brute createMany
   */
  export type BruteCreateManyArgs = {
    /**
     * The data used to create many Brutes.
     */
    data: Enumerable<BruteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Brute update
   */
  export type BruteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BruteInclude | null
    /**
     * The data needed to update a Brute.
     */
    data: XOR<BruteUpdateInput, BruteUncheckedUpdateInput>
    /**
     * Choose, which Brute to update.
     */
    where: BruteWhereUniqueInput
  }


  /**
   * Brute updateMany
   */
  export type BruteUpdateManyArgs = {
    /**
     * The data used to update Brutes.
     */
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyInput>
    /**
     * Filter which Brutes to update
     */
    where?: BruteWhereInput
  }


  /**
   * Brute upsert
   */
  export type BruteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BruteInclude | null
    /**
     * The filter to search for the Brute to update in case it exists.
     */
    where: BruteWhereUniqueInput
    /**
     * In case the Brute found by the `where` argument doesn't exist, create a new Brute with this data.
     */
    create: XOR<BruteCreateInput, BruteUncheckedCreateInput>
    /**
     * In case the Brute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BruteUpdateInput, BruteUncheckedUpdateInput>
  }


  /**
   * Brute delete
   */
  export type BruteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BruteInclude | null
    /**
     * Filter which Brute to delete.
     */
    where: BruteWhereUniqueInput
  }


  /**
   * Brute deleteMany
   */
  export type BruteDeleteManyArgs = {
    /**
     * Filter which Brutes to delete
     */
    where?: BruteWhereInput
  }


  /**
   * Brute.armes
   */
  export type Brute$armesArgs = {
    /**
     * Select specific fields to fetch from the Arme
     */
    select?: ArmeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmeInclude | null
    where?: ArmeWhereInput
    orderBy?: Enumerable<ArmeOrderByWithRelationInput>
    cursor?: ArmeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ArmeScalarFieldEnum>
  }


  /**
   * Brute without action
   */
  export type BruteArgs = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BruteInclude | null
  }



  /**
   * Model Arme
   */


  export type AggregateArme = {
    _count: ArmeCountAggregateOutputType | null
    _avg: ArmeAvgAggregateOutputType | null
    _sum: ArmeSumAggregateOutputType | null
    _min: ArmeMinAggregateOutputType | null
    _max: ArmeMaxAggregateOutputType | null
  }

  export type ArmeAvgAggregateOutputType = {
    id: number | null
    tauxDeCritique: number | null
    multiplicateurCritique: number | null
    poids: number | null
    modificateurDegats: number | null
    bruteId: number | null
  }

  export type ArmeSumAggregateOutputType = {
    id: number | null
    tauxDeCritique: number | null
    multiplicateurCritique: number | null
    poids: number | null
    modificateurDegats: number | null
    bruteId: number | null
  }

  export type ArmeMinAggregateOutputType = {
    id: number | null
    tauxDeCritique: number | null
    multiplicateurCritique: number | null
    poids: number | null
    modificateurDegats: number | null
    bruteId: number | null
  }

  export type ArmeMaxAggregateOutputType = {
    id: number | null
    tauxDeCritique: number | null
    multiplicateurCritique: number | null
    poids: number | null
    modificateurDegats: number | null
    bruteId: number | null
  }

  export type ArmeCountAggregateOutputType = {
    id: number
    tauxDeCritique: number
    multiplicateurCritique: number
    poids: number
    modificateurDegats: number
    bruteId: number
    _all: number
  }


  export type ArmeAvgAggregateInputType = {
    id?: true
    tauxDeCritique?: true
    multiplicateurCritique?: true
    poids?: true
    modificateurDegats?: true
    bruteId?: true
  }

  export type ArmeSumAggregateInputType = {
    id?: true
    tauxDeCritique?: true
    multiplicateurCritique?: true
    poids?: true
    modificateurDegats?: true
    bruteId?: true
  }

  export type ArmeMinAggregateInputType = {
    id?: true
    tauxDeCritique?: true
    multiplicateurCritique?: true
    poids?: true
    modificateurDegats?: true
    bruteId?: true
  }

  export type ArmeMaxAggregateInputType = {
    id?: true
    tauxDeCritique?: true
    multiplicateurCritique?: true
    poids?: true
    modificateurDegats?: true
    bruteId?: true
  }

  export type ArmeCountAggregateInputType = {
    id?: true
    tauxDeCritique?: true
    multiplicateurCritique?: true
    poids?: true
    modificateurDegats?: true
    bruteId?: true
    _all?: true
  }

  export type ArmeAggregateArgs = {
    /**
     * Filter which Arme to aggregate.
     */
    where?: ArmeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Armes to fetch.
     */
    orderBy?: Enumerable<ArmeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArmeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Armes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Armes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Armes
    **/
    _count?: true | ArmeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArmeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArmeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArmeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArmeMaxAggregateInputType
  }

  export type GetArmeAggregateType<T extends ArmeAggregateArgs> = {
        [P in keyof T & keyof AggregateArme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArme[P]>
      : GetScalarType<T[P], AggregateArme[P]>
  }




  export type ArmeGroupByArgs = {
    where?: ArmeWhereInput
    orderBy?: Enumerable<ArmeOrderByWithAggregationInput>
    by: ArmeScalarFieldEnum[]
    having?: ArmeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArmeCountAggregateInputType | true
    _avg?: ArmeAvgAggregateInputType
    _sum?: ArmeSumAggregateInputType
    _min?: ArmeMinAggregateInputType
    _max?: ArmeMaxAggregateInputType
  }


  export type ArmeGroupByOutputType = {
    id: number
    tauxDeCritique: number
    multiplicateurCritique: number
    poids: number
    modificateurDegats: number
    bruteId: number
    _count: ArmeCountAggregateOutputType | null
    _avg: ArmeAvgAggregateOutputType | null
    _sum: ArmeSumAggregateOutputType | null
    _min: ArmeMinAggregateOutputType | null
    _max: ArmeMaxAggregateOutputType | null
  }

  type GetArmeGroupByPayload<T extends ArmeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ArmeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArmeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArmeGroupByOutputType[P]>
            : GetScalarType<T[P], ArmeGroupByOutputType[P]>
        }
      >
    >


  export type ArmeSelect = {
    id?: boolean
    tauxDeCritique?: boolean
    multiplicateurCritique?: boolean
    poids?: boolean
    modificateurDegats?: boolean
    bruteId?: boolean
    brute?: boolean | BruteArgs
  }


  export type ArmeInclude = {
    brute?: boolean | BruteArgs
  }

  export type ArmeGetPayload<S extends boolean | null | undefined | ArmeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Arme :
    S extends undefined ? never :
    S extends { include: any } & (ArmeArgs | ArmeFindManyArgs)
    ? Arme  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'brute' ? BruteGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ArmeArgs | ArmeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'brute' ? BruteGetPayload<S['select'][P]> :  P extends keyof Arme ? Arme[P] : never
  } 
      : Arme


  type ArmeCountArgs = 
    Omit<ArmeFindManyArgs, 'select' | 'include'> & {
      select?: ArmeCountAggregateInputType | true
    }

  export interface ArmeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Arme that matches the filter.
     * @param {ArmeFindUniqueArgs} args - Arguments to find a Arme
     * @example
     * // Get one Arme
     * const arme = await prisma.arme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArmeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ArmeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Arme'> extends True ? Prisma__ArmeClient<ArmeGetPayload<T>> : Prisma__ArmeClient<ArmeGetPayload<T> | null, null>

    /**
     * Find one Arme that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ArmeFindUniqueOrThrowArgs} args - Arguments to find a Arme
     * @example
     * // Get one Arme
     * const arme = await prisma.arme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArmeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ArmeFindUniqueOrThrowArgs>
    ): Prisma__ArmeClient<ArmeGetPayload<T>>

    /**
     * Find the first Arme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmeFindFirstArgs} args - Arguments to find a Arme
     * @example
     * // Get one Arme
     * const arme = await prisma.arme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArmeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ArmeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Arme'> extends True ? Prisma__ArmeClient<ArmeGetPayload<T>> : Prisma__ArmeClient<ArmeGetPayload<T> | null, null>

    /**
     * Find the first Arme that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmeFindFirstOrThrowArgs} args - Arguments to find a Arme
     * @example
     * // Get one Arme
     * const arme = await prisma.arme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArmeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ArmeFindFirstOrThrowArgs>
    ): Prisma__ArmeClient<ArmeGetPayload<T>>

    /**
     * Find zero or more Armes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Armes
     * const armes = await prisma.arme.findMany()
     * 
     * // Get first 10 Armes
     * const armes = await prisma.arme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const armeWithIdOnly = await prisma.arme.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArmeFindManyArgs>(
      args?: SelectSubset<T, ArmeFindManyArgs>
    ): Prisma.PrismaPromise<Array<ArmeGetPayload<T>>>

    /**
     * Create a Arme.
     * @param {ArmeCreateArgs} args - Arguments to create a Arme.
     * @example
     * // Create one Arme
     * const Arme = await prisma.arme.create({
     *   data: {
     *     // ... data to create a Arme
     *   }
     * })
     * 
    **/
    create<T extends ArmeCreateArgs>(
      args: SelectSubset<T, ArmeCreateArgs>
    ): Prisma__ArmeClient<ArmeGetPayload<T>>

    /**
     * Create many Armes.
     *     @param {ArmeCreateManyArgs} args - Arguments to create many Armes.
     *     @example
     *     // Create many Armes
     *     const arme = await prisma.arme.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ArmeCreateManyArgs>(
      args?: SelectSubset<T, ArmeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Arme.
     * @param {ArmeDeleteArgs} args - Arguments to delete one Arme.
     * @example
     * // Delete one Arme
     * const Arme = await prisma.arme.delete({
     *   where: {
     *     // ... filter to delete one Arme
     *   }
     * })
     * 
    **/
    delete<T extends ArmeDeleteArgs>(
      args: SelectSubset<T, ArmeDeleteArgs>
    ): Prisma__ArmeClient<ArmeGetPayload<T>>

    /**
     * Update one Arme.
     * @param {ArmeUpdateArgs} args - Arguments to update one Arme.
     * @example
     * // Update one Arme
     * const arme = await prisma.arme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArmeUpdateArgs>(
      args: SelectSubset<T, ArmeUpdateArgs>
    ): Prisma__ArmeClient<ArmeGetPayload<T>>

    /**
     * Delete zero or more Armes.
     * @param {ArmeDeleteManyArgs} args - Arguments to filter Armes to delete.
     * @example
     * // Delete a few Armes
     * const { count } = await prisma.arme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArmeDeleteManyArgs>(
      args?: SelectSubset<T, ArmeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Armes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Armes
     * const arme = await prisma.arme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArmeUpdateManyArgs>(
      args: SelectSubset<T, ArmeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Arme.
     * @param {ArmeUpsertArgs} args - Arguments to update or create a Arme.
     * @example
     * // Update or create a Arme
     * const arme = await prisma.arme.upsert({
     *   create: {
     *     // ... data to create a Arme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Arme we want to update
     *   }
     * })
    **/
    upsert<T extends ArmeUpsertArgs>(
      args: SelectSubset<T, ArmeUpsertArgs>
    ): Prisma__ArmeClient<ArmeGetPayload<T>>

    /**
     * Count the number of Armes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmeCountArgs} args - Arguments to filter Armes to count.
     * @example
     * // Count the number of Armes
     * const count = await prisma.arme.count({
     *   where: {
     *     // ... the filter for the Armes we want to count
     *   }
     * })
    **/
    count<T extends ArmeCountArgs>(
      args?: Subset<T, ArmeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArmeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Arme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArmeAggregateArgs>(args: Subset<T, ArmeAggregateArgs>): Prisma.PrismaPromise<GetArmeAggregateType<T>>

    /**
     * Group by Arme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArmeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArmeGroupByArgs['orderBy'] }
        : { orderBy?: ArmeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArmeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArmeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Arme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ArmeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    brute<T extends BruteArgs= {}>(args?: Subset<T, BruteArgs>): Prisma__BruteClient<BruteGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Arme base type for findUnique actions
   */
  export type ArmeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Arme
     */
    select?: ArmeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmeInclude | null
    /**
     * Filter, which Arme to fetch.
     */
    where: ArmeWhereUniqueInput
  }

  /**
   * Arme findUnique
   */
  export interface ArmeFindUniqueArgs extends ArmeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Arme findUniqueOrThrow
   */
  export type ArmeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Arme
     */
    select?: ArmeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmeInclude | null
    /**
     * Filter, which Arme to fetch.
     */
    where: ArmeWhereUniqueInput
  }


  /**
   * Arme base type for findFirst actions
   */
  export type ArmeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Arme
     */
    select?: ArmeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmeInclude | null
    /**
     * Filter, which Arme to fetch.
     */
    where?: ArmeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Armes to fetch.
     */
    orderBy?: Enumerable<ArmeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Armes.
     */
    cursor?: ArmeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Armes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Armes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Armes.
     */
    distinct?: Enumerable<ArmeScalarFieldEnum>
  }

  /**
   * Arme findFirst
   */
  export interface ArmeFindFirstArgs extends ArmeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Arme findFirstOrThrow
   */
  export type ArmeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Arme
     */
    select?: ArmeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmeInclude | null
    /**
     * Filter, which Arme to fetch.
     */
    where?: ArmeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Armes to fetch.
     */
    orderBy?: Enumerable<ArmeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Armes.
     */
    cursor?: ArmeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Armes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Armes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Armes.
     */
    distinct?: Enumerable<ArmeScalarFieldEnum>
  }


  /**
   * Arme findMany
   */
  export type ArmeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Arme
     */
    select?: ArmeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmeInclude | null
    /**
     * Filter, which Armes to fetch.
     */
    where?: ArmeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Armes to fetch.
     */
    orderBy?: Enumerable<ArmeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Armes.
     */
    cursor?: ArmeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Armes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Armes.
     */
    skip?: number
    distinct?: Enumerable<ArmeScalarFieldEnum>
  }


  /**
   * Arme create
   */
  export type ArmeCreateArgs = {
    /**
     * Select specific fields to fetch from the Arme
     */
    select?: ArmeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmeInclude | null
    /**
     * The data needed to create a Arme.
     */
    data: XOR<ArmeCreateInput, ArmeUncheckedCreateInput>
  }


  /**
   * Arme createMany
   */
  export type ArmeCreateManyArgs = {
    /**
     * The data used to create many Armes.
     */
    data: Enumerable<ArmeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Arme update
   */
  export type ArmeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Arme
     */
    select?: ArmeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmeInclude | null
    /**
     * The data needed to update a Arme.
     */
    data: XOR<ArmeUpdateInput, ArmeUncheckedUpdateInput>
    /**
     * Choose, which Arme to update.
     */
    where: ArmeWhereUniqueInput
  }


  /**
   * Arme updateMany
   */
  export type ArmeUpdateManyArgs = {
    /**
     * The data used to update Armes.
     */
    data: XOR<ArmeUpdateManyMutationInput, ArmeUncheckedUpdateManyInput>
    /**
     * Filter which Armes to update
     */
    where?: ArmeWhereInput
  }


  /**
   * Arme upsert
   */
  export type ArmeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Arme
     */
    select?: ArmeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmeInclude | null
    /**
     * The filter to search for the Arme to update in case it exists.
     */
    where: ArmeWhereUniqueInput
    /**
     * In case the Arme found by the `where` argument doesn't exist, create a new Arme with this data.
     */
    create: XOR<ArmeCreateInput, ArmeUncheckedCreateInput>
    /**
     * In case the Arme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArmeUpdateInput, ArmeUncheckedUpdateInput>
  }


  /**
   * Arme delete
   */
  export type ArmeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Arme
     */
    select?: ArmeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmeInclude | null
    /**
     * Filter which Arme to delete.
     */
    where: ArmeWhereUniqueInput
  }


  /**
   * Arme deleteMany
   */
  export type ArmeDeleteManyArgs = {
    /**
     * Filter which Armes to delete
     */
    where?: ArmeWhereInput
  }


  /**
   * Arme without action
   */
  export type ArmeArgs = {
    /**
     * Select specific fields to fetch from the Arme
     */
    select?: ArmeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmeInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ArmeScalarFieldEnum: {
    id: 'id',
    tauxDeCritique: 'tauxDeCritique',
    multiplicateurCritique: 'multiplicateurCritique',
    poids: 'poids',
    modificateurDegats: 'modificateurDegats',
    bruteId: 'bruteId'
  };

  export type ArmeScalarFieldEnum = (typeof ArmeScalarFieldEnum)[keyof typeof ArmeScalarFieldEnum]


  export const BruteScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    currentxp: 'currentxp',
    maxxp: 'maxxp',
    level: 'level',
    hp: 'hp',
    force: 'force',
    endurance: 'endurance',
    agilite: 'agilite',
    nbmatch: 'nbmatch'
  };

  export type BruteScalarFieldEnum = (typeof BruteScalarFieldEnum)[keyof typeof BruteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type BruteWhereInput = {
    AND?: Enumerable<BruteWhereInput>
    OR?: Enumerable<BruteWhereInput>
    NOT?: Enumerable<BruteWhereInput>
    id?: IntFilter | number
    nom?: StringFilter | string
    currentxp?: IntFilter | number
    maxxp?: IntFilter | number
    level?: IntFilter | number
    hp?: IntFilter | number
    force?: IntFilter | number
    endurance?: IntFilter | number
    agilite?: IntFilter | number
    nbmatch?: IntFilter | number
    armes?: ArmeListRelationFilter
  }

  export type BruteOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    currentxp?: SortOrder
    maxxp?: SortOrder
    level?: SortOrder
    hp?: SortOrder
    force?: SortOrder
    endurance?: SortOrder
    agilite?: SortOrder
    nbmatch?: SortOrder
    armes?: ArmeOrderByRelationAggregateInput
  }

  export type BruteWhereUniqueInput = {
    id?: number
  }

  export type BruteOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    currentxp?: SortOrder
    maxxp?: SortOrder
    level?: SortOrder
    hp?: SortOrder
    force?: SortOrder
    endurance?: SortOrder
    agilite?: SortOrder
    nbmatch?: SortOrder
    _count?: BruteCountOrderByAggregateInput
    _avg?: BruteAvgOrderByAggregateInput
    _max?: BruteMaxOrderByAggregateInput
    _min?: BruteMinOrderByAggregateInput
    _sum?: BruteSumOrderByAggregateInput
  }

  export type BruteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BruteScalarWhereWithAggregatesInput>
    OR?: Enumerable<BruteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BruteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nom?: StringWithAggregatesFilter | string
    currentxp?: IntWithAggregatesFilter | number
    maxxp?: IntWithAggregatesFilter | number
    level?: IntWithAggregatesFilter | number
    hp?: IntWithAggregatesFilter | number
    force?: IntWithAggregatesFilter | number
    endurance?: IntWithAggregatesFilter | number
    agilite?: IntWithAggregatesFilter | number
    nbmatch?: IntWithAggregatesFilter | number
  }

  export type ArmeWhereInput = {
    AND?: Enumerable<ArmeWhereInput>
    OR?: Enumerable<ArmeWhereInput>
    NOT?: Enumerable<ArmeWhereInput>
    id?: IntFilter | number
    tauxDeCritique?: FloatFilter | number
    multiplicateurCritique?: FloatFilter | number
    poids?: FloatFilter | number
    modificateurDegats?: FloatFilter | number
    bruteId?: IntFilter | number
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
  }

  export type ArmeOrderByWithRelationInput = {
    id?: SortOrder
    tauxDeCritique?: SortOrder
    multiplicateurCritique?: SortOrder
    poids?: SortOrder
    modificateurDegats?: SortOrder
    bruteId?: SortOrder
    brute?: BruteOrderByWithRelationInput
  }

  export type ArmeWhereUniqueInput = {
    id?: number
  }

  export type ArmeOrderByWithAggregationInput = {
    id?: SortOrder
    tauxDeCritique?: SortOrder
    multiplicateurCritique?: SortOrder
    poids?: SortOrder
    modificateurDegats?: SortOrder
    bruteId?: SortOrder
    _count?: ArmeCountOrderByAggregateInput
    _avg?: ArmeAvgOrderByAggregateInput
    _max?: ArmeMaxOrderByAggregateInput
    _min?: ArmeMinOrderByAggregateInput
    _sum?: ArmeSumOrderByAggregateInput
  }

  export type ArmeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ArmeScalarWhereWithAggregatesInput>
    OR?: Enumerable<ArmeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ArmeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    tauxDeCritique?: FloatWithAggregatesFilter | number
    multiplicateurCritique?: FloatWithAggregatesFilter | number
    poids?: FloatWithAggregatesFilter | number
    modificateurDegats?: FloatWithAggregatesFilter | number
    bruteId?: IntWithAggregatesFilter | number
  }

  export type BruteCreateInput = {
    nom: string
    currentxp?: number
    maxxp?: number
    level?: number
    hp?: number
    force?: number
    endurance?: number
    agilite?: number
    nbmatch?: number
    armes?: ArmeCreateNestedManyWithoutBruteInput
  }

  export type BruteUncheckedCreateInput = {
    id?: number
    nom: string
    currentxp?: number
    maxxp?: number
    level?: number
    hp?: number
    force?: number
    endurance?: number
    agilite?: number
    nbmatch?: number
    armes?: ArmeUncheckedCreateNestedManyWithoutBruteInput
  }

  export type BruteUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    currentxp?: IntFieldUpdateOperationsInput | number
    maxxp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    force?: IntFieldUpdateOperationsInput | number
    endurance?: IntFieldUpdateOperationsInput | number
    agilite?: IntFieldUpdateOperationsInput | number
    nbmatch?: IntFieldUpdateOperationsInput | number
    armes?: ArmeUpdateManyWithoutBruteNestedInput
  }

  export type BruteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    currentxp?: IntFieldUpdateOperationsInput | number
    maxxp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    force?: IntFieldUpdateOperationsInput | number
    endurance?: IntFieldUpdateOperationsInput | number
    agilite?: IntFieldUpdateOperationsInput | number
    nbmatch?: IntFieldUpdateOperationsInput | number
    armes?: ArmeUncheckedUpdateManyWithoutBruteNestedInput
  }

  export type BruteCreateManyInput = {
    id?: number
    nom: string
    currentxp?: number
    maxxp?: number
    level?: number
    hp?: number
    force?: number
    endurance?: number
    agilite?: number
    nbmatch?: number
  }

  export type BruteUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    currentxp?: IntFieldUpdateOperationsInput | number
    maxxp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    force?: IntFieldUpdateOperationsInput | number
    endurance?: IntFieldUpdateOperationsInput | number
    agilite?: IntFieldUpdateOperationsInput | number
    nbmatch?: IntFieldUpdateOperationsInput | number
  }

  export type BruteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    currentxp?: IntFieldUpdateOperationsInput | number
    maxxp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    force?: IntFieldUpdateOperationsInput | number
    endurance?: IntFieldUpdateOperationsInput | number
    agilite?: IntFieldUpdateOperationsInput | number
    nbmatch?: IntFieldUpdateOperationsInput | number
  }

  export type ArmeCreateInput = {
    tauxDeCritique: number
    multiplicateurCritique: number
    poids: number
    modificateurDegats: number
    brute: BruteCreateNestedOneWithoutArmesInput
  }

  export type ArmeUncheckedCreateInput = {
    id?: number
    tauxDeCritique: number
    multiplicateurCritique: number
    poids: number
    modificateurDegats: number
    bruteId: number
  }

  export type ArmeUpdateInput = {
    tauxDeCritique?: FloatFieldUpdateOperationsInput | number
    multiplicateurCritique?: FloatFieldUpdateOperationsInput | number
    poids?: FloatFieldUpdateOperationsInput | number
    modificateurDegats?: FloatFieldUpdateOperationsInput | number
    brute?: BruteUpdateOneRequiredWithoutArmesNestedInput
  }

  export type ArmeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tauxDeCritique?: FloatFieldUpdateOperationsInput | number
    multiplicateurCritique?: FloatFieldUpdateOperationsInput | number
    poids?: FloatFieldUpdateOperationsInput | number
    modificateurDegats?: FloatFieldUpdateOperationsInput | number
    bruteId?: IntFieldUpdateOperationsInput | number
  }

  export type ArmeCreateManyInput = {
    id?: number
    tauxDeCritique: number
    multiplicateurCritique: number
    poids: number
    modificateurDegats: number
    bruteId: number
  }

  export type ArmeUpdateManyMutationInput = {
    tauxDeCritique?: FloatFieldUpdateOperationsInput | number
    multiplicateurCritique?: FloatFieldUpdateOperationsInput | number
    poids?: FloatFieldUpdateOperationsInput | number
    modificateurDegats?: FloatFieldUpdateOperationsInput | number
  }

  export type ArmeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tauxDeCritique?: FloatFieldUpdateOperationsInput | number
    multiplicateurCritique?: FloatFieldUpdateOperationsInput | number
    poids?: FloatFieldUpdateOperationsInput | number
    modificateurDegats?: FloatFieldUpdateOperationsInput | number
    bruteId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type ArmeListRelationFilter = {
    every?: ArmeWhereInput
    some?: ArmeWhereInput
    none?: ArmeWhereInput
  }

  export type ArmeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BruteCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    currentxp?: SortOrder
    maxxp?: SortOrder
    level?: SortOrder
    hp?: SortOrder
    force?: SortOrder
    endurance?: SortOrder
    agilite?: SortOrder
    nbmatch?: SortOrder
  }

  export type BruteAvgOrderByAggregateInput = {
    id?: SortOrder
    currentxp?: SortOrder
    maxxp?: SortOrder
    level?: SortOrder
    hp?: SortOrder
    force?: SortOrder
    endurance?: SortOrder
    agilite?: SortOrder
    nbmatch?: SortOrder
  }

  export type BruteMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    currentxp?: SortOrder
    maxxp?: SortOrder
    level?: SortOrder
    hp?: SortOrder
    force?: SortOrder
    endurance?: SortOrder
    agilite?: SortOrder
    nbmatch?: SortOrder
  }

  export type BruteMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    currentxp?: SortOrder
    maxxp?: SortOrder
    level?: SortOrder
    hp?: SortOrder
    force?: SortOrder
    endurance?: SortOrder
    agilite?: SortOrder
    nbmatch?: SortOrder
  }

  export type BruteSumOrderByAggregateInput = {
    id?: SortOrder
    currentxp?: SortOrder
    maxxp?: SortOrder
    level?: SortOrder
    hp?: SortOrder
    force?: SortOrder
    endurance?: SortOrder
    agilite?: SortOrder
    nbmatch?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type BruteRelationFilter = {
    is?: BruteWhereInput
    isNot?: BruteWhereInput
  }

  export type ArmeCountOrderByAggregateInput = {
    id?: SortOrder
    tauxDeCritique?: SortOrder
    multiplicateurCritique?: SortOrder
    poids?: SortOrder
    modificateurDegats?: SortOrder
    bruteId?: SortOrder
  }

  export type ArmeAvgOrderByAggregateInput = {
    id?: SortOrder
    tauxDeCritique?: SortOrder
    multiplicateurCritique?: SortOrder
    poids?: SortOrder
    modificateurDegats?: SortOrder
    bruteId?: SortOrder
  }

  export type ArmeMaxOrderByAggregateInput = {
    id?: SortOrder
    tauxDeCritique?: SortOrder
    multiplicateurCritique?: SortOrder
    poids?: SortOrder
    modificateurDegats?: SortOrder
    bruteId?: SortOrder
  }

  export type ArmeMinOrderByAggregateInput = {
    id?: SortOrder
    tauxDeCritique?: SortOrder
    multiplicateurCritique?: SortOrder
    poids?: SortOrder
    modificateurDegats?: SortOrder
    bruteId?: SortOrder
  }

  export type ArmeSumOrderByAggregateInput = {
    id?: SortOrder
    tauxDeCritique?: SortOrder
    multiplicateurCritique?: SortOrder
    poids?: SortOrder
    modificateurDegats?: SortOrder
    bruteId?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type ArmeCreateNestedManyWithoutBruteInput = {
    create?: XOR<Enumerable<ArmeCreateWithoutBruteInput>, Enumerable<ArmeUncheckedCreateWithoutBruteInput>>
    connectOrCreate?: Enumerable<ArmeCreateOrConnectWithoutBruteInput>
    createMany?: ArmeCreateManyBruteInputEnvelope
    connect?: Enumerable<ArmeWhereUniqueInput>
  }

  export type ArmeUncheckedCreateNestedManyWithoutBruteInput = {
    create?: XOR<Enumerable<ArmeCreateWithoutBruteInput>, Enumerable<ArmeUncheckedCreateWithoutBruteInput>>
    connectOrCreate?: Enumerable<ArmeCreateOrConnectWithoutBruteInput>
    createMany?: ArmeCreateManyBruteInputEnvelope
    connect?: Enumerable<ArmeWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ArmeUpdateManyWithoutBruteNestedInput = {
    create?: XOR<Enumerable<ArmeCreateWithoutBruteInput>, Enumerable<ArmeUncheckedCreateWithoutBruteInput>>
    connectOrCreate?: Enumerable<ArmeCreateOrConnectWithoutBruteInput>
    upsert?: Enumerable<ArmeUpsertWithWhereUniqueWithoutBruteInput>
    createMany?: ArmeCreateManyBruteInputEnvelope
    set?: Enumerable<ArmeWhereUniqueInput>
    disconnect?: Enumerable<ArmeWhereUniqueInput>
    delete?: Enumerable<ArmeWhereUniqueInput>
    connect?: Enumerable<ArmeWhereUniqueInput>
    update?: Enumerable<ArmeUpdateWithWhereUniqueWithoutBruteInput>
    updateMany?: Enumerable<ArmeUpdateManyWithWhereWithoutBruteInput>
    deleteMany?: Enumerable<ArmeScalarWhereInput>
  }

  export type ArmeUncheckedUpdateManyWithoutBruteNestedInput = {
    create?: XOR<Enumerable<ArmeCreateWithoutBruteInput>, Enumerable<ArmeUncheckedCreateWithoutBruteInput>>
    connectOrCreate?: Enumerable<ArmeCreateOrConnectWithoutBruteInput>
    upsert?: Enumerable<ArmeUpsertWithWhereUniqueWithoutBruteInput>
    createMany?: ArmeCreateManyBruteInputEnvelope
    set?: Enumerable<ArmeWhereUniqueInput>
    disconnect?: Enumerable<ArmeWhereUniqueInput>
    delete?: Enumerable<ArmeWhereUniqueInput>
    connect?: Enumerable<ArmeWhereUniqueInput>
    update?: Enumerable<ArmeUpdateWithWhereUniqueWithoutBruteInput>
    updateMany?: Enumerable<ArmeUpdateManyWithWhereWithoutBruteInput>
    deleteMany?: Enumerable<ArmeScalarWhereInput>
  }

  export type BruteCreateNestedOneWithoutArmesInput = {
    create?: XOR<BruteCreateWithoutArmesInput, BruteUncheckedCreateWithoutArmesInput>
    connectOrCreate?: BruteCreateOrConnectWithoutArmesInput
    connect?: BruteWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BruteUpdateOneRequiredWithoutArmesNestedInput = {
    create?: XOR<BruteCreateWithoutArmesInput, BruteUncheckedCreateWithoutArmesInput>
    connectOrCreate?: BruteCreateOrConnectWithoutArmesInput
    upsert?: BruteUpsertWithoutArmesInput
    connect?: BruteWhereUniqueInput
    update?: XOR<BruteUpdateWithoutArmesInput, BruteUncheckedUpdateWithoutArmesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type ArmeCreateWithoutBruteInput = {
    tauxDeCritique: number
    multiplicateurCritique: number
    poids: number
    modificateurDegats: number
  }

  export type ArmeUncheckedCreateWithoutBruteInput = {
    id?: number
    tauxDeCritique: number
    multiplicateurCritique: number
    poids: number
    modificateurDegats: number
  }

  export type ArmeCreateOrConnectWithoutBruteInput = {
    where: ArmeWhereUniqueInput
    create: XOR<ArmeCreateWithoutBruteInput, ArmeUncheckedCreateWithoutBruteInput>
  }

  export type ArmeCreateManyBruteInputEnvelope = {
    data: Enumerable<ArmeCreateManyBruteInput>
    skipDuplicates?: boolean
  }

  export type ArmeUpsertWithWhereUniqueWithoutBruteInput = {
    where: ArmeWhereUniqueInput
    update: XOR<ArmeUpdateWithoutBruteInput, ArmeUncheckedUpdateWithoutBruteInput>
    create: XOR<ArmeCreateWithoutBruteInput, ArmeUncheckedCreateWithoutBruteInput>
  }

  export type ArmeUpdateWithWhereUniqueWithoutBruteInput = {
    where: ArmeWhereUniqueInput
    data: XOR<ArmeUpdateWithoutBruteInput, ArmeUncheckedUpdateWithoutBruteInput>
  }

  export type ArmeUpdateManyWithWhereWithoutBruteInput = {
    where: ArmeScalarWhereInput
    data: XOR<ArmeUpdateManyMutationInput, ArmeUncheckedUpdateManyWithoutArmesInput>
  }

  export type ArmeScalarWhereInput = {
    AND?: Enumerable<ArmeScalarWhereInput>
    OR?: Enumerable<ArmeScalarWhereInput>
    NOT?: Enumerable<ArmeScalarWhereInput>
    id?: IntFilter | number
    tauxDeCritique?: FloatFilter | number
    multiplicateurCritique?: FloatFilter | number
    poids?: FloatFilter | number
    modificateurDegats?: FloatFilter | number
    bruteId?: IntFilter | number
  }

  export type BruteCreateWithoutArmesInput = {
    nom: string
    currentxp?: number
    maxxp?: number
    level?: number
    hp?: number
    force?: number
    endurance?: number
    agilite?: number
    nbmatch?: number
  }

  export type BruteUncheckedCreateWithoutArmesInput = {
    id?: number
    nom: string
    currentxp?: number
    maxxp?: number
    level?: number
    hp?: number
    force?: number
    endurance?: number
    agilite?: number
    nbmatch?: number
  }

  export type BruteCreateOrConnectWithoutArmesInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutArmesInput, BruteUncheckedCreateWithoutArmesInput>
  }

  export type BruteUpsertWithoutArmesInput = {
    update: XOR<BruteUpdateWithoutArmesInput, BruteUncheckedUpdateWithoutArmesInput>
    create: XOR<BruteCreateWithoutArmesInput, BruteUncheckedCreateWithoutArmesInput>
  }

  export type BruteUpdateWithoutArmesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    currentxp?: IntFieldUpdateOperationsInput | number
    maxxp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    force?: IntFieldUpdateOperationsInput | number
    endurance?: IntFieldUpdateOperationsInput | number
    agilite?: IntFieldUpdateOperationsInput | number
    nbmatch?: IntFieldUpdateOperationsInput | number
  }

  export type BruteUncheckedUpdateWithoutArmesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    currentxp?: IntFieldUpdateOperationsInput | number
    maxxp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    force?: IntFieldUpdateOperationsInput | number
    endurance?: IntFieldUpdateOperationsInput | number
    agilite?: IntFieldUpdateOperationsInput | number
    nbmatch?: IntFieldUpdateOperationsInput | number
  }

  export type ArmeCreateManyBruteInput = {
    id?: number
    tauxDeCritique: number
    multiplicateurCritique: number
    poids: number
    modificateurDegats: number
  }

  export type ArmeUpdateWithoutBruteInput = {
    tauxDeCritique?: FloatFieldUpdateOperationsInput | number
    multiplicateurCritique?: FloatFieldUpdateOperationsInput | number
    poids?: FloatFieldUpdateOperationsInput | number
    modificateurDegats?: FloatFieldUpdateOperationsInput | number
  }

  export type ArmeUncheckedUpdateWithoutBruteInput = {
    id?: IntFieldUpdateOperationsInput | number
    tauxDeCritique?: FloatFieldUpdateOperationsInput | number
    multiplicateurCritique?: FloatFieldUpdateOperationsInput | number
    poids?: FloatFieldUpdateOperationsInput | number
    modificateurDegats?: FloatFieldUpdateOperationsInput | number
  }

  export type ArmeUncheckedUpdateManyWithoutArmesInput = {
    id?: IntFieldUpdateOperationsInput | number
    tauxDeCritique?: FloatFieldUpdateOperationsInput | number
    multiplicateurCritique?: FloatFieldUpdateOperationsInput | number
    poids?: FloatFieldUpdateOperationsInput | number
    modificateurDegats?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}